# version: '3.8' # Removido para evitar warnings

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: mcp_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  mcp-server:
    build: ./mcp-server
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=mcp_platform
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - REDIS_HOST=redis 
      - REDIS_PORT=6379
    env_file:
      - .env 
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./mcp-server/app:/app/app   
      - ./config:/config_data      # <--- ADICIONADO ESTE VOLUME
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  web-ui:
    build: ./web-ui
    ports:
      - "3000:80" 
    depends_on:
      - mcp-server
    # Adicionar healthcheck se o status 'unhealthy' persistir e Nginx estiver OK
    # healthcheck:
    #   test: ["CMD-SHELL", "wget --spider --quiet http://localhost/ || exit 1"] # Exemplo simples
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3


volumes:
  postgres_data:
  redis_data: